class Solution
{
    public:
    /*You are required to complete this method*/
    int findK(int a[MAX][MAX],int n,int m,int k)
    {
 		int top = 0;
        int left = 0;
        int right = m-1;
        int bottom = n-1;
        int dir =0;
        int count=0;
       
        std::vector<int> AA ;
        AA.clear();
        while(top<=bottom and left<=right)
        {
            if(dir==0)
            {
                for(int i=left ;i<=right;i++)
                {
                    AA.push_back(a[top][i]);
                }
                top++;
                dir=1;
                
            }
            if(dir==1)
            {
                for(int i=top;i<=bottom;i++)
                {
                   AA.push_back(a[i][right]);
                }
                right--;
                dir=2;
                
               
            }
            if(dir==2)
            {
                for(int i=right;i>=left;i--)
                {
                    AA.push_back(a[bottom][i]);
                }
                bottom--;
                dir=3;
            }
            if(dir==3)
            {
                for(int i=bottom;i>=top;i--)
                {
                   AA.push_back(a[i][left]);
                }
                left++;
                dir=0;
            }
            
        }
        
        return AA[k-1];
    }
};
